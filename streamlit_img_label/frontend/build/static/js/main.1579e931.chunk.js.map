{"version":3,"sources":["StreamlitImgLabel.module.css","StreamlitImgLabel.tsx","index.tsx"],"names":["module","exports","dark","withStreamlitConnection","props","dataUri","_useState","useState","_useState2","_slicedToArray","mode","setMode","_useState3","_useState4","labels","setLabels","_useState5","fabric","Canvas","_useState6","canvas","setCanvas","_props$args","args","canvasWidth","canvasHeight","imageData","_useState7","_useState8","newBBoxIndex","setNewBBoxIndex","invisCanvas","document","createElement","ctx","getContext","width","height","idata","createImageData","data","set","putImageData","toDataURL","useEffect","_props$args2","rects","boxColor","canvasTmp","enableRetinaScaling","backgroundImage","uniScaleTransform","forEach","rect","top","left","add","Rect","fill","objectCaching","stroke","strokeWidth","strokeUniform","hasRotatingPoint","map","label","Streamlit","setFrameHeight","clearHandler","getObjects","remove","sendCoordinates","returnLabels","i","_objectSpread","getBoundingRect","setComponentValue","on","renderAll","off","onSelectMode","body","classList","window","matchMedia","addEventListener","e","matches","removeEventListener","React","Fragment","id","className","styles","style","onClick","box","concat","_toConsumableArray","selectObject","getActiveObject","selectIndex","indexOf","filter","_props$args3","ReactDOM","render","StrictMode","StreamlitImgLabel","getElementById"],"mappings":"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","file":"static/js/main.1579e931.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"StreamlitImgLabel_dark__14M8f\"};","import React, { useEffect, useState } from \"react\"\r\nimport {\r\n    ComponentProps,\r\n    Streamlit,\r\n    withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport { fabric } from \"fabric\"\r\nimport styles from \"./StreamlitImgLabel.module.css\"\r\n\r\ninterface RectProps {\r\n    top: number\r\n    left: number\r\n    width: number\r\n    height: number\r\n    label: string\r\n}\r\n\r\ninterface PythonArgs {\r\n    canvasWidth: number\r\n    canvasHeight: number\r\n    rects: RectProps[]\r\n    boxColor: string\r\n    imageData: Uint8ClampedArray\r\n}\r\n\r\nconst StreamlitImgLabel = (props: ComponentProps) => {\r\n    const [mode, setMode] = useState<string>(\"light\")\r\n    const [labels, setLabels] = useState<string[]>([])\r\n    const [canvas, setCanvas] = useState(new fabric.Canvas(\"\"))\r\n    const { canvasWidth, canvasHeight, imageData }: PythonArgs = props.args\r\n    const [newBBoxIndex, setNewBBoxIndex] = useState<number>(0)\r\n\r\n    /*\r\n     * Translate Python image data to a JavaScript Image\r\n     */\r\n    var invisCanvas = document.createElement(\"canvas\")\r\n    var ctx = invisCanvas.getContext(\"2d\")\r\n\r\n    invisCanvas.width = canvasWidth\r\n    invisCanvas.height = canvasHeight\r\n\r\n    // create imageData object\r\n    let dataUri: any\r\n    if (ctx) {\r\n        var idata = ctx.createImageData(canvasWidth, canvasHeight)\r\n\r\n        // set our buffer as source\r\n        idata.data.set(imageData)\r\n\r\n        // update canvas with new data\r\n        ctx.putImageData(idata, 0, 0)\r\n        dataUri = invisCanvas.toDataURL()\r\n    } else {\r\n        dataUri = \"\"\r\n    }\r\n\r\n    // Initialize canvas on mount and add a rectangle\r\n    useEffect(() => {\r\n        const { rects, boxColor }: PythonArgs = props.args\r\n        const canvasTmp = new fabric.Canvas(\"c\", {\r\n            enableRetinaScaling: false,\r\n            backgroundImage: dataUri,\r\n            uniScaleTransform: true,\r\n        })\r\n\r\n        rects.forEach((rect) => {\r\n            const { top, left, width, height } = rect\r\n            canvasTmp.add(\r\n                new fabric.Rect({\r\n                    left,\r\n                    top,\r\n                    fill: \"\",\r\n                    width,\r\n                    height,\r\n                    objectCaching: true,\r\n                    stroke: boxColor,\r\n                    strokeWidth: 1,\r\n                    strokeUniform: true,\r\n                    hasRotatingPoint: false,\r\n                })\r\n            )\r\n        })\r\n        setLabels(rects.map((rect) => rect.label))\r\n\r\n        setCanvas(canvasTmp)\r\n        Streamlit.setFrameHeight()\r\n        // eslint-disable-next-line\r\n    }, [canvasHeight, canvasWidth, dataUri])\r\n\r\n    // Create defualt bounding box\r\n    const defaultBox = () => ({\r\n        left: canvasWidth * 0.15 + newBBoxIndex * 3,\r\n        top: canvasHeight * 0.15 + newBBoxIndex * 3,\r\n        width: canvasWidth * 0.2,\r\n        height: canvasHeight * 0.2,\r\n    })\r\n\r\n    // Add new bounding box to be image\r\n    const addBoxHandler = () => {\r\n        const box = defaultBox()\r\n        setNewBBoxIndex(newBBoxIndex + 1)\r\n        canvas.add(\r\n            new fabric.Rect({\r\n                ...box,\r\n                fill: \"\",\r\n                objectCaching: true,\r\n                stroke: props.args.boxColor,\r\n                strokeWidth: 1,\r\n                strokeUniform: true,\r\n                hasRotatingPoint: false,\r\n            })\r\n        )\r\n        sendCoordinates([...labels, \"\"])\r\n    }\r\n\r\n    // Remove the selected bounding box\r\n    const removeBoxHandler = () => {\r\n        const selectObject = canvas.getActiveObject()\r\n        const selectIndex = canvas.getObjects().indexOf(selectObject)\r\n        canvas.remove(selectObject)\r\n        sendCoordinates(labels.filter((label, i) => i !== selectIndex))\r\n    }\r\n\r\n    // Reset the bounding boxes\r\n    const resetHandler = () => {\r\n        clearHandler()\r\n        const { rects, boxColor }: PythonArgs = props.args\r\n        rects.forEach((rect) => {\r\n            const { top, left, width, height } = rect\r\n            canvas.add(\r\n                new fabric.Rect({\r\n                    left,\r\n                    top,\r\n                    fill: \"\",\r\n                    width,\r\n                    height,\r\n                    objectCaching: true,\r\n                    stroke: boxColor,\r\n                    strokeWidth: 1,\r\n                    strokeUniform: true,\r\n                    hasRotatingPoint: false,\r\n                })\r\n            )\r\n        })\r\n        sendCoordinates(labels)\r\n    }\r\n\r\n    // Remove all the bounding boxes\r\n    const clearHandler = () => {\r\n        setNewBBoxIndex(0)\r\n        canvas.getObjects().forEach((rect) => canvas.remove(rect))\r\n        sendCoordinates([])\r\n    }\r\n\r\n    // Send the coordinates of the rectangle back to streamlit.\r\n    const sendCoordinates = (returnLabels: string[]) => {\r\n        setLabels(returnLabels)\r\n        const rects = canvas.getObjects().map((rect, i) => ({\r\n            ...rect.getBoundingRect(),\r\n            label: returnLabels[i],\r\n        }))\r\n        Streamlit.setComponentValue({ rects })\r\n    }\r\n\r\n    // Update the bounding boxes when modified\r\n    useEffect(() => {\r\n        if (!canvas) {\r\n            return\r\n        }\r\n        const handleEvent = () => {\r\n            canvas.renderAll()\r\n            sendCoordinates(labels)\r\n        }\r\n\r\n        canvas.on(\"object:modified\", handleEvent)\r\n        return () => {\r\n            canvas.off(\"object:modified\")\r\n        }\r\n    })\r\n\r\n    // Adjust the theme according to the system\r\n    const onSelectMode = (mode: string) => {\r\n        setMode(mode)\r\n        if (mode === \"dark\") document.body.classList.add(\"dark-mode\")\r\n        else document.body.classList.remove(\"dark-mode\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Add listener to update styles\r\n        window\r\n            .matchMedia(\"(prefers-color-scheme: dark)\")\r\n            .addEventListener(\"change\", (e) =>\r\n                onSelectMode(e.matches ? \"dark\" : \"light\")\r\n            )\r\n\r\n        // Setup dark/light mode for the first time\r\n        onSelectMode(\r\n            window.matchMedia(\"(prefers-color-scheme: dark)\").matches\r\n                ? \"dark\"\r\n                : \"light\"\r\n        )\r\n\r\n        // Remove listener\r\n        return () => {\r\n            window\r\n                .matchMedia(\"(prefers-color-scheme: dark)\")\r\n                .removeEventListener(\"change\", () => { })\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <canvas\r\n                id=\"c\"\r\n                className={mode === \"dark\" ? styles.dark : \"\"}\r\n                width={canvasWidth}\r\n                height={canvasHeight}\r\n                style={{ width: \"100%\" }}\r\n            />\r\n            <div className={mode === \"dark\" ? styles.dark : \"\"}>\r\n                <button\r\n                    className={mode === \"dark\" ? styles.dark : \"\"}\r\n                    onClick={addBoxHandler}\r\n                >\r\n                    Add bounding box\r\n                </button>\r\n                <button\r\n                    className={mode === \"dark\" ? styles.dark : \"\"}\r\n                    onClick={removeBoxHandler}\r\n                >\r\n                    Remove select\r\n                </button>\r\n                <button\r\n                    className={mode === \"dark\" ? styles.dark : \"\"}\r\n                    onClick={resetHandler}\r\n                >\r\n                    Reset\r\n                </button>\r\n                <button\r\n                    className={mode === \"dark\" ? styles.dark : \"\"}\r\n                    onClick={clearHandler}\r\n                >\r\n                    Clear all\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withStreamlitConnection(StreamlitImgLabel)","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitImgLabel from \"./StreamlitImgLabel\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitImgLabel />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}